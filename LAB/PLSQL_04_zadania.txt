--ZADANIE 01  PLSQL_04_zadania

--tabela do zapisu 
CREATE TABLE DziennikOperacji(
    id_operacji         NUMBER(12) GENERATED ALWAYS AS IDENTITY,
    czas_operacji       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    operacja            VARCHAR(10),
    nazwa_tabeli        VARCHAR(30),   
    liczba_wierszy      NUMBER(12));

--wyzwalacz

create or replace TRIGGER LogujOperacje
    AFTER INSERT OR DELETE OR UPDATE ON Zespoly
DECLARE 
    vOperacja DziennikOperacji.operacja%TYPE;
    vNazwaTabeli DziennikOperacji.nazwa_tabeli%TYPE:='Zespoly';
    vLiczbaWierszy  DziennikOperacji.liczba_wierszy%TYPE;    
BEGIN
    CASE
        WHEN INSERTING THEN
            vOperacja := 'INSERT';
        WHEN DELETING THEN
            vOperacja := 'DELETE';
        WHEN UPDATING THEN
            vOperacja := 'UPDATE';
        END CASE;
        
        SELECT COUNT(*) INTO vLiczbaWierszy FROM  Zespoly;
        
        INSERT  INTO DziennikOperacji
             VALUES (DEFAULT,DEFAULT,vOperacja,vNazwaTabeli,vLiczbaWierszy);
        DBMS_OUTPUT.PUT_LINE('Dodano wpis w Dienniku Operacji');
END;

--Operacje 
UPDATE ZESPOLY
SET adres = 'Kombinerki'
WHERE ID_ZESP =10;
/
INSERT INTO ZESPOLY
VALUES (59,'MISKI','Shire 18');
/
DELETE FROM ZESPOLY
WHERE nazwa='MISKI';
========================================================================================================
--ZADANIE 02  PLSQL_04_zadania
--nie działa przy zmianie z NULL na 0(warunek widzi NULL jako 0 oraz zadziała wtedy TRIGGER  WymuszajPlace) 
create or replace TRIGGER PokazPlace
    BEFORE UPDATE OF placa_pod ON Pracownicy
    FOR EACH ROW
    when (coalesce(OLD.placa_pod,0)<>coalesce(NEW.placa_pod,0))
BEGIN
    DBMS_OUTPUT.PUT_LINE('Pracownik ' || :OLD.nazwisko);
    DBMS_OUTPUT.PUT_LINE('Płaca przed modyfikacją: ' || :OLD.placa_pod);
    DBMS_OUTPUT.PUT_LINE('Płaca po modyfikacji: ' || :NEW.placa_pod);
END;
========================================================================================================
--ZADANIE 03  PLSQL_04_zadania
create or replace TRIGGER  UzupelnijPlace
    BEFORE INSERT ON Pracownicy
    FOR EACH ROW
    WHEN (NEW.placa_pod IS NULL OR NEW.placa_dod IS NULL)
DECLARE
    vPlacaPod pracownicy.placa_pod%TYPE;
BEGIN
    IF :NEW.placa_dod IS NULL THEN
        :NEW.placa_dod:=0;
    END IF;
    
    IF( :NEW.placa_pod IS NULL AND :NEW.ETAT IS NOT NULL) THEN
        SELECT PLACA_MIN INTO vPlacaPod
        FROM ETATY
        WHERE nazwa=:NEW.ETAT;
        
        :NEW.placa_pod:=vPlacaPod;        
    END IF;
    DBMS_OUTPUT.PUT_LINE('Uzupelniono Place');
END;
========================================================================================================
--ZADANIE 04  PLSQL_04_zadania
CREATE SEQUENCE SEQ_ZESPOLY  INCREMENT BY 1 START WITH 91; 

create or replace TRIGGER UzupelnijID 
    BEFORE INSERT ON ZESPOLY
    FOR EACH ROW
DECLARE
    vIdZespolu zespoly.id_zesp%TYPE;
BEGIN
    :NEW.ID_ZESP:=SEQ_Zespoly.NEXTVAL;
    DBMS_OUTPUT.PUT_LINE('UzupelnijID ');
END;

========================================================================================================
--ZADANIE 05  PLSQL_04_zadania
CREATE OR REPLACE  VIEW SZEFOWIE AS 
  SELECT
    SZEF,
    COUNT(SZEF) AS PRACOWNICY
FROM
    (SELECT
        (SELECT szef.nazwisko from pracownicy szef where prac.id_szefa = szef.id_prac)   AS SZEF
    FROM
        pracownicy prac
    where 
        id_szefa IS NOT NULL)
GROUP BY
    SZEF
ORDER BY
    SZEF;

create or replace TRIGGER KasujSzefa
    INSTEAD OF DELETE  ON Szefowie
    FOR EACH ROW
DECLARE
    v_idSzefa pracownicy.id_szefa%TYPE;
    v_flagaSzefa pracownicy.id_szefa%TYPE:=0;
    CURSOR cPRACOWNICY (vid_szefa pracownicy.id_szefa%TYPE) IS
        SELECT
            *
        FROM
            PRACOWNICY PRAC 
        WHERE 
            PRAC.id_szefa=v_idszefa
    FOR UPDATE;
BEGIN
    SELECT  id_prac INTO v_idSzefa
    FROM    pracownicy
    where nazwisko =:old.szef;
     
    FOR vrcPRACOWNICY IN cPRACOWNICY(v_idSzefa) LOOP
    
        BEGIN
            SELECT id_szefa INTO  v_flagaSzefa FROM pracownicy WHERE id_szefa = vrcPRACOWNICY.ID_PRAC GROUP BY id_szefa;   

            RAISE_APPLICATION_ERROR(-20001,'Jeden z podwladnych usuwanego praconika jest szefem innych pracownikow');
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    DELETE FROM PRACOWNICY
                    WHERE CURRENT OF cPRACOWNICY;
         END;
         
    END LOOP;
    
    DELETE FROM PRACOWNICY WHERE NAZWISKO = :old.szef;  
    
END;


SELECT * from szefowie;

DELETE FROM szefowie WHERE  szef='MORZY';


SELECT
    *
FROM
    pracownicy
where
    id_prac=140 or id_szefa=140;


========================================================================================================












