--ZADANIE 01  PLSQL_02_zadania

CREATE OR REPLACE PROCEDURE NowyPracownik
   (cNazwiskoPracownik IN pracownicy.nazwisko%TYPE,
    cNazwaZespolu IN zespoly.nazwa%TYPE,
    cNazwiskoSzef IN pracownicy.nazwisko%TYPE,
    cPlacaPod IN pracownicy.placa_pod%TYPE,
    cZatrudniony IN  pracownicy.zatrudniony%TYPE DEFAULT CURRENT_DATE,
    cEtat IN  pracownicy.etat%TYPE DEFAULT 'STAZYSTA') IS

BEGIN
    INSERT INTO PRACOWNICY 
        (    ID_PRAC,
             NAZWISKO,ETAT,ID_SZEFA,ZATRUDNIONY,PLACA_POD,
             ID_ZESP)
    VALUES 
        (   (SELECT max(ID_PRAC)+1 FROM PRACOWNICY),
            cNazwiskoPracownik,cEtat,(SELECT ID_PRAC FROM PRACOWNICY WHERE NAZWISKO=cNazwiskoSzef),cZatrudniony,cPlacaPod,
            (SELECT ID_ZESP FROM ZESPOLY  WHERE NAZWA=cNazwaZespolu));  
END NowyPracownik;
/

EXEC NowyPracownik('DYNDALSKI','ALGORYTMY','BLAZEWICZ',250);

SELECT * FROM Pracownicy WHERE nazwisko = 'DYNDALSKI';

========================================================================================================
--ZADANIE 02  PLSQL_02_zadania
CREATE OR REPLACE FUNCTION PlacaNetto
   (cPlacaPod IN NUMBER,
    cPodatek IN NUMBER:=20)
RETURN NUMBER IS
    vPlacaNetto NUMBER;
BEGIN
 vPlacaNetto:= 100*cPlacaPod/(100+cPodatek) ;
RETURN ROUND(vPlacaNetto,2);     
END ;
/

SELECT nazwisko, placa_pod AS BRUTTO,
PlacaNetto(placa_pod, 35) AS NETTO
FROM Pracownicy WHERE etat = 'PROFESOR' ORDER BY nazwisko;
========================================================================================================
--ZADANIE 03  PLSQL_02_zadania
CREATE OR REPLACE FUNCTION Silnia
    (n IN NUMBER)
RETURN NUMBER IS
    vWynik number(20):=1;
BEGIN
    IF n<0 THEN
       RETURN (-1);  -- ZWRACA -1 GDY NIE OTRAFI WYLICZYC SILNI;
        
    ELSIF n>0 THEN
        FOR i IN 1..n LOOP
             vWynik:= vWynik*i;
        END LOOP;
    END IF;
    RETURN vWynik;
END;
/

SELECT Silnia (8) FROM Dual;
========================================================================================================
--ZADANIE 04  PLSQL_02_zadania
CREATE OR REPLACE FUNCTION SilniaRek
    (n IN NUMBER)
RETURN NUMBER IS
    vWynik number(20):=1;
BEGIN
--sprawdzenie warunku bledu brak silni z liczby ujemnej zwaca -1
    IF n<0  THEN
        RETURN (-1);
    END IF;      

    IF n=1 THEN
       RETURN (1);  
    END IF;    

    RETURN  (n*SilniaRek(n-1));
END;
/

SELECT SilniaRek (10) FROM Dual;
========================================================================================================
--ZADANIE 05  PLSQL_02_zadania
CREATE OR REPLACE FUNCTION IleLat
    (data IN DATE)
RETURN NUMBER IS
BEGIN
    IF CURRENT_DATE<data THEN  --DETEKCJA BLEDU 
         RETURN  (-1);
    END IF;

    RETURN EXTRACT (YEAR FROM (CURRENT_DATE-data) YEAR TO MONTH); 
END;
/

SELECT nazwisko, zatrudniony, IleLat(zatrudniony) AS staz
FROM Pracownicy WHERE placa_pod > 1000
ORDER BY nazwisko;
========================================================================================================
--ZADANIE 06  PLSQL_02_zadania
CREATE OR REPLACE PACKAGE Konwersja IS
    FUNCTION Cels_To_Fahr(cTemKonwert NUMBER)
            RETURN NUMBER;
    FUNCTION Fahr_To_Cels(cTemKonwert NUMBER)
            RETURN NUMBER;    
END Konwersja;
/

CREATE OR REPLACE PACKAGE BODY Konwersja IS

    FUNCTION Cels_To_Fahr(cTemKonwert NUMBER)
        RETURN NUMBER IS
        BEGIN
            RETURN (9/5)*cTemKonwert+32;
        END;
    
    FUNCTION Fahr_To_Cels(cTemKonwert NUMBER)
        RETURN NUMBER IS
        BEGIN
            RETURN (5/9)*(cTemKonwert-32);
        END;

END Konwersja;
/

SELECT Konwersja.Fahr_To_Cels(212) AS CELSJUSZ FROM Dual;

SELECT Konwersja.Cels_To_Fahr(0) AS FAHRENHEIT FROM Dual;
========================================================================================================
--ZADANIE 07  PLSQL_02_zadania
CREATE OR REPLACE PACKAGE Zmienne IS
    PROCEDURE ZwiekszLicznik;
    PROCEDURE ZmniejszLicznik;
    FUNCTION  PokazLicznik
        RETURN NUMBER;
END Zmienne;
/

CREATE OR REPLACE PACKAGE BODY Zmienne IS
    vLicznik NUMBER:=0;
    
     PROCEDURE ZwiekszLicznik IS
        BEGIN
            vLicznik:= vLicznik+1;
        END;
    
    PROCEDURE ZmniejszLicznik IS
        BEGIN
            vLicznik:= vLicznik-1;
        END;   
    
    FUNCTION  PokazLicznik
    RETURN NUMBER IS       
        BEGIN            
            RETURN  vLicznik;
        END;  
END Zmienne;
/

BEGIN
    dbms_output.put_line(Zmienne.PokazLicznik);
    
    Zmienne.ZwiekszLicznik;
    DBMS_OUTPUT.PUT_LINE(Zmienne.PokazLicznik);
    Zmienne.ZwiekszLicznik;
    
    DBMS_OUTPUT.PUT_LINE (Zmienne.PokazLicznik);
    Zmienne.ZmniejszLicznik;
    DBMS_OUTPUT.PUT_LINE (Zmienne.PokazLicznik);
   
END;
========================================================================================================
--ZADANIE 08  PLSQL_02_zadania
CREATE OR REPLACE PACKAGE IntZespoly IS
    PROCEDURE Add_Zespol (cNazwa VARCHAR2,cAdres VARCHAR2); 
    PROCEDURE Subtract_Zespol_ID (cId_zesp number);
    PROCEDURE Subtract_Zespol_NAZWA (cNazwa_zesp VARCHAR2);
    PROCEDURE Change_Zespol (cId_Zesp number, cNew_Name VARCHAR2, cNew_Address VARCHAR2);
    FUNCTION Get_Id_Zespolu (cNazwa VARCHAR2) RETURN NUMBER;
END IntZespoly;
/

CREATE OR REPLACE PACKAGE BODY IntZespoly IS
    PROCEDURE Add_Zespol (cNazwa VARCHAR2,cAdres VARCHAR2) IS
        BEGIN
            INSERT INTO ZESPOLY VALUES((SELECT MAX(ID_ZESP)+1 FROM zespoly),cNazwa,cAdres);
        END;
        
     PROCEDURE Subtract_Zespol_id (cId_zesp number) IS
        BEGIN 
            DELETE FROM ZESPOLY WHERE ID_ZESP=cId_zesp;
        END;
        
    PROCEDURE Subtract_Zespol_NAZWA (cNazwa_zesp VARCHAR2)IS
        BEGIN
            DELETE FROM ZESPOLY WHERE NAZWA=cNazwa_zesp;
        END;

    PROCEDURE Change_Zespol (cId_Zesp number, cNew_Name VARCHAR2, cNew_Address VARCHAR2) IS
        BEGIN
            UPDATE ZESPOLY
            SET NAZWA = cNew_Name,
                ADRES= cNew_Address
            WHERE ID_ZESP =cId_Zesp ;            
        END;
    
    FUNCTION Get_Id_Zespolu (cNazwa VARCHAR2) RETURN NUMBER IS
        vWynik Number:=0;
        BEGIN
            SELECT ID_ZESP into vWynik FROM ZESPOLY WHERE NAZWA= cNazwa;
            RETURN coalesce(vWynik,-1);
        END;
        
        
END IntZespoly;
/
========================================================================================================


